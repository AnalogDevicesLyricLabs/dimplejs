import org.apache.tools.ant.filters.ReplaceTokens

project.description = 'Javascript front-end'

ext {
	libDir = new File(rootDir, '/lib/')
	jnlpFile = file("dimplejs-${dimplejsVersion}.jnlp")
	jnlpTemplate = file('jnlp-template.xml')
	testApplet = file('applet-test.html')
}
task assemble(dependsOn: ['copyJavaScriptFiles', 'generateTestApplet']) {
	group = 'Build'
}

task copyJavaScriptFiles(dependsOn: 'generateJNLP', type:Copy) {
	group = 'Build'
	from(projectDir) { 
		include('*.js')
		include('*.jnlp')
	}
	into libDir
}

task generateTestApplet(type:Copy) {
	group = 'Build'
	from 'applet-test-template.html'
	into projectDir
	rename 'applet-test-template.html', 'applet-test.html'
	filter(ReplaceTokens, tokens: [jnlpfile: '../lib/' + jnlpFile.getName()])
}

task generateJNLP(dependsOn: ':java:copyJars') {
	group = 'Build'
	inputs.file(jnlpTemplate)
	outputs.file(jnlpFile)

	doLast {
		generateJNLPFromTemplate(jnlpTemplate, jnlpFile, '.')
	}
}

def generateJNLPFromTemplate(template, jnlpFile, codebase) {

	// Parse XML template file with no validation, no namespace and allowing DOCTYPE
    def root = new XmlParser(false, false, true).parse(file(template))

    // Setting values in the jnlp template
    // Setting root values
    root.@codebase = codebase
    root.@href = jnlpFile.name

    // Add jars
    def resource = root.resources[0]
    def jars = fileTree(libDir).include('**/*.jar')
    jars.each {
        def resourceValues = [href: it.name]
        if (it.name == "dimple-${dimplejsVersion}.jar") {
            resourceValues = [href: it.name, main: 'true']
        }
        resource.appendNode('jar', resourceValues)
    }

    // Writing the jnlp file filled
    new XmlNodePrinter(new PrintWriter(jnlpFile)).print(root)
}

task cleanJavaScript (type:Delete) {
	group = 'Cleanup'

	delete 'applet-test.html'
	delete fileTree(dir: projectDir, include: '*.jnlp')
	delete fileTree(dir: libDir, includes: ['*.jnlp', '*.js', '*.html'])
}

task clean(dependsOn: cleanJavaScript) {
	group = 'Cleanup'
}