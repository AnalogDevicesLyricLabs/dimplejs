/*****************************************************************************
*   Copyright 2015 Analog Devices, Inc.
*
*   Licensed under the Apache License, Version 2.0 (the "License");
*   you may not use this file except in compliance with the License.
*   You may obtain a copy of the License at
*
*       http://www.apache.org/licenses/LICENSE-2.0
*
*   Unless required by applicable law or agreed to in writing, software
*   distributed under the License is distributed on an "AS IS" BASIS,
*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
*   See the License for the specific language governing permissions and
*   limitations under the License. 
******************************************************************************/

project.description = 'Javascript API for Dimple'
project.version = dimplejsVersion
project.group = 'com.analog.lyric'

apply plugin: 'java';
apply plugin: 'jacoco' // for java code coverage

archivesBaseName = 'dimplejs'

defaultTasks 'build'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
		repositories {
			jcenter()
		}
		dependencies {
			classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
		}
}

//Specify what repositories to use when looking for jars
repositories {
  if (! project.ext.has('jenkins')) {
    flatDir name: 'dimpleSourceTree', dirs: ["${dimpleSourceRoot}/solvers/lib"] 
  }
  mavenCentral()
  maven {
    url "http://mbari-maven-repository.googlecode.com/svn/repository/"
  }
  maven {
    url "http://www.array.ca/nest-web/maven/"
  }

}

ext.javaHome = System.properties.get('java.home')

def os = System.getProperty("os.name").toLowerCase()
if (os.contains("linux")) {
	ext.pluginJar = files("/usr/share/icedtea-web/plugin.jar")
} else {
	ext.pluginJar = files("${javaHome}/lib/plugin.jar")	
}

dependencies {
	compile "com.analog.lyric.dimple:dimple:+"
	compile "org.eclipse.jdt:org.eclipse.jdt.annotation:1.1.0"
    compile "colt:colt:1.2.0"
	compile "net.jcip:jcip-annotations:1.0"
	compile "com.google.guava:guava:18.0"
	compile "org.apache.commons:commons-math3:3.5"
	compile files(pluginJar)
	compile "junit:junit:4.11"
}

task('copyExternalJars', type:Copy) {
	from(configurations.compile)
	into file('../lib')
}

task('copyDimplejsJar', type: Copy) {
  from (jar)
  into file('../lib')
}

//Eclipse can only specify relative paths for jar files that are in
//subdirectories of the .classpath file.  As a result, we also have
//to copy all of the jar files into the build/external-libs directory
task copyExternalJarsForEclipse(type: Copy) {
  from configurations.compile
  into(file('build/external-libs'))
}

//define a new task for copying all jars
task copyJars

//define all of the jar copy tasks
copyJars.dependsOn copyDimplejsJar, copyExternalJars, copyExternalJarsForEclipse

//As part of assembly, make sure all jars are in the required locations
assemble.dependsOn copyJars

jar {
	// FIXME: instead of this, only include .class files from classes directory
	// to avoid picking up resources that Eclipse implicitly copies.
	duplicatesStrategy = 'exclude'
	manifest {
		attributes(
			"Implementation-Title": "Dimplejs",
			"Implementation-Vendor": "Lyric Labs | Analog Devices",
			"Implementation-Version": dimplejsVersion,
			"Permissions": "sandbox")
	}
}

